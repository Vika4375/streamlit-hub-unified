import streamlit as st
import random
import json
import pandas as pd
from datetime import datetime

# --- –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è
def set_custom_page_style():
    st.markdown("""
        <style>
        html, body, [class*="css"] {
            background-color: #f0f4ff;
            font-family: 'Segoe UI', sans-serif;
        }
        .main {
            background: linear-gradient(145deg, #fefefe, #e1e9ff);
            border-radius: 10px;
            padding: 2rem;
        }
        h1 {
            color: #4b4bff;
            text-align: center;
        }
        .stButton > button {
            background-color: #4b4bff;
            color: white;
            border-radius: 8px;
        }
        </style>
    """, unsafe_allow_html=True)

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="üí´ Streamlit Hub",
    page_icon="‚ú®",
    layout="wide"
)
set_custom_page_style()

# --- –ù–∞–∑–≤–∞
st.title("üí´ –ú—ñ–π —Å—É–ø–µ—Ä Streamlit-–∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫")
st.markdown("### üë©‚Äçüíª –°—Ç–≤–æ—Ä–µ–Ω–æ –∑ ‚ù§Ô∏è –Ω–∞ Python + Streamlit")

# --- –ú–µ–Ω—é
st.sidebar.title("üìö –ú–µ–Ω—é")
menu = st.sidebar.radio("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", [
    "üéÆ –í–≥–∞–¥–∞–π —Å–ª–æ–≤–æ",
    "üìî –©–æ–¥–µ–Ω–Ω–∏–∫",
    "üìö –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ñ—Å—Ç–æ—Ä—ñ–π (üîú)",
    "üß† –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ (üîú)",
    "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ (üîú)"
])

# --- 1. –ì—Ä–∞
if menu == "üéÆ –í–≥–∞–¥–∞–π —Å–ª–æ–≤–æ":
    st.header("üéØ –ì—Ä–∞: –í–≥–∞–¥–∞–π —Å–ª–æ–≤–æ")
    words = ["—è–±–ª—É–∫–æ", "–±–∞–Ω–∞–Ω", "—Å–ª–∏–≤–∞", "–ª–∏–º–æ–Ω", "–≥—Ä—É—à–∞"]
    if "secret_word" not in st.session_state:
        st.session_state.secret_word = random.choice(words)
        st.session_state.guesses = []
        st.session_state.finished = False

    if st.button("üîÑ –ù–æ–≤–∞ –≥—Ä–∞"):
        st.session_state.secret_word = random.choice(words)
        st.session_state.guesses = []
        st.session_state.finished = False

    guess = st.text_input("–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ:").strip().lower()
    if st.button("üîç –í–≥–∞–¥–∞—Ç–∏") and not st.session_state.finished:
        if guess:
            st.session_state.guesses.append(guess)
            if guess == st.session_state.secret_word:
                st.success(f"üéâ –í–≥–∞–¥–∞–≤(-–ª–∞) –∑ {len(st.session_state.guesses)} —Å–ø—Ä–æ–±–∏!")
                st.session_state.finished = True
                result = {
                    "—Å–ª–æ–≤–æ": guess,
                    "–∑–¥–æ–≥–∞–¥–∫–∏": st.session_state.guesses,
                    "—Ä–µ–∑—É–ª—å—Ç–∞—Ç": "–≤–∏–≥—Ä–∞–≤",
                    "—á–∞—Å": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
            elif len(st.session_state.guesses) >= 5:
                st.error(f"üíÄ –ü—Ä–æ–≥—Ä–∞–≤(-–ª–∞). –°–ª–æ–≤–æ: {st.session_state.secret_word}")
                st.session_state.finished = True
                result = {
                    "—Å–ª–æ–≤–æ": st.session_state.secret_word,
                    "–∑–¥–æ–≥–∞–¥–∫–∏": st.session_state.guesses,
                    "—Ä–µ–∑—É–ª—å—Ç–∞—Ç": "–ø—Ä–æ–≥—Ä–∞–≤",
                    "—á–∞—Å": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
            else:
                st.warning("‚ùå –ù—ñ, —Å–ø—Ä–æ–±—É–π —â–µ!")

            if st.session_state.finished:
                with open("game_results.json", "a", encoding="utf-8") as f:
                    f.write(json.dumps(result, ensure_ascii=False) + "\n")

    if st.session_state.guesses:
        st.markdown("üìú **–¢–≤–æ—ó –∑–¥–æ–≥–∞–¥–∫–∏:**")
        st.code(", ".join(st.session_state.guesses))

# --- 2. –©–æ–¥–µ–Ω–Ω–∏–∫
elif menu == "üìî –©–æ–¥–µ–Ω–Ω–∏–∫":
    st.header("üìî –ú—ñ–π —â–æ–¥–µ–Ω–Ω–∏–∫")
    note = st.text_area("üìù –í–∞—à–∞ –Ω–æ—Ç–∞—Ç–∫–∞", height=150)
    if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É"):
        if note.strip():
            entry = {
                "–¥–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "—Ç–µ–∫—Å—Ç": note.strip()
            }
            with open("notes.json", "a", encoding="utf-8") as f:
                f.write(json.dumps(entry, ensure_ascii=False) + "\n")
            st.success("‚úÖ –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        else:
            st.warning("–ù–æ—Ç–∞—Ç–∫–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")

    try:
        with open("notes.json", "r", encoding="utf-8") as f:
            entries = [json.loads(line) for line in f]
        st.subheader("üìã –û—Å—Ç–∞–Ω–Ω—ñ 5 –Ω–æ—Ç–∞—Ç–æ–∫:")
        for n in reversed(entries[-5:]):
            st.markdown(f"**üïí {n['–¥–∞—Ç–∞']}**")
            st.info(n['—Ç–µ–∫—Å—Ç'])
            st.markdown("---")
    except:
        st.info("–ñ–æ–¥–Ω–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")

# --- 3. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ñ—Å—Ç–æ—Ä—ñ–π
elif menu == "üìö –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ñ—Å—Ç–æ—Ä—ñ–π (üîú)":
    st.header("üìö –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–∏—Ö —ñ—Å—Ç–æ—Ä—ñ–π")

    st.sidebar.subheader("üßë‚Äçüé® –î–æ–¥–∞–π —Å–≤–æ—ó –≤–∞—Ä—ñ–∞–Ω—Ç–∏:")
    chars = st.sidebar.text_area("–•—Ç–æ?", "–ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç, –∫—ñ—Ç, —É—á–µ–Ω—å").split(",")
    actions = st.sidebar.text_area("–©–æ —Ä–æ–±–∏–≤(-–ª–∞)?", "–∑–Ω–∞–π—à–æ–≤ —Å–∫–∞—Ä–±, –∑–∞–≥—É–±–∏–≤—Å—è, —Å—Ç–≤–æ—Ä–∏–≤ –®–Ü").split(",")
    places = st.sidebar.text_area("–î–µ?", "—É –º–µ—Ç—Ä–æ, –≤ –ª—ñ—Å—ñ, –Ω–∞ —É—Ä–æ—Ü—ñ Python").split(",")

    def generate():
        return f"üìò –û–¥–Ω–æ–≥–æ —Ä–∞–∑—É {random.choice(chars).strip()} {random.choice(actions).strip()} {random.choice(places).strip()}."

    if st.button("‚ú® –°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é"):
        story = generate()
        st.success(story)

        result = {
            "–¥–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "—ñ—Å—Ç–æ—Ä—ñ—ó": [story]
        }
        with open("generated_stories.json", "a", encoding="utf-8") as f:
            f.write(json.dumps(result, ensure_ascii=False) + "\n")

# --- 4. –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞
elif menu == "üß† –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ (üîú)":
    st.header("üß† –ú—ñ–Ω—ñ-–≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞")

    questions = [
        {"–ø–∏—Ç–∞–Ω–Ω—è": "–Ø–∫–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç —É Python?", "–≤–∞—Ä—ñ–∞–Ω—Ç–∏": ["show()", "echo()", "print()"], "–ø—Ä–∞–≤–∏–ª—å–Ω–∞": "print()"},
        {"–ø–∏—Ç–∞–Ω–Ω—è": "–Ø–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–∞—î –¥–æ–≤–∂–∏–Ω—É?", "–≤–∞—Ä—ñ–∞–Ω—Ç–∏": ["size()", "len()", "length()"], "–ø—Ä–∞–≤–∏–ª—å–Ω–∞": "len()"}
    ]

    if "q_idx" not in st.session_state:
        st.session_state.q_idx = 0
        st.session_state.balls = 0

    if st.session_state.q_idx < len(questions):
        q = questions[st.session_state.q_idx]
        st.subheader(f"–ü–∏—Ç–∞–Ω–Ω—è {st.session_state.q_idx + 1} –∑ {len(questions)}")
        answer = st.radio(q["–ø–∏—Ç–∞–Ω–Ω—è"], q["–≤–∞—Ä—ñ–∞–Ω—Ç–∏"], key=f"q{st.session_state.q_idx}")
        if st.button("‚úÖ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏"):
            if answer == q["–ø—Ä–∞–≤–∏–ª—å–Ω–∞"]:
                st.success("‚úÖ –í—ñ—Ä–Ω–æ!")
                st.session_state.balls += 1
            else:
                st.error(f"‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {q['–ø—Ä–∞–≤–∏–ª—å–Ω–∞']}")
            st.session_state.q_idx += 1
            st.experimental_rerun()
    else:
        st.balloons()
        st.success(f"üèÅ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: {st.session_state.balls} –∑ {len(questions)}")
        if st.button("üîÅ –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É"):
            del st.session_state.q_idx
            del st.session_state.balls
            st.experimental_rerun()

# --- 5. –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞
elif menu == "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ (üîú)":
    st.header("üìä –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –ø–∞–Ω–µ–ª—å")

    try:
        with open("game_results.json", "r", encoding="utf-8") as f:
            game_data = [json.loads(line) for line in f]
        df = pd.DataFrame(game_data)
        df["—Å–ø—Ä–æ–±"] = df["–∑–¥–æ–≥–∞–¥–∫–∏"].apply(len)
        st.write("üéØ –Ü–≥–æ—Ä:", len(df))
        st.write("‚úÖ –í–∏–≥—Ä–∞—à—ñ–≤:", (df["—Ä–µ–∑—É–ª—å—Ç–∞—Ç"] == "–≤–∏–≥—Ä–∞–≤").sum())
        st.write("‚ùå –ü—Ä–æ–≥—Ä–∞—à—ñ–≤:", (df["—Ä–µ–∑—É–ª—å—Ç–∞—Ç"] == "–ø—Ä–æ–≥—Ä–∞–≤").sum())
        st.write("üìä –°–µ—Ä–µ–¥–Ω—î —Å–ø—Ä–æ–±:", round(df["—Å–ø—Ä–æ–±"].mean(), 2))
        st.bar_chart(df["—Ä–µ–∑—É–ª—å—Ç–∞—Ç"].value_counts())
    except:
        st.warning("–§–∞–π–ª –∑ —ñ–≥—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    try:
        with open("generated_stories.json", "r", encoding="utf-8") as f:
            stories = [json.loads(line) for line in f]
        df2 = pd.DataFrame(stories)
        df2["–¥–µ–Ω—å"] = df2["–¥–∞—Ç–∞"].str[:10]
        st.line_chart(df2["–¥–µ–Ω—å"].value_counts().sort_index())
    except:
        st.warning("–§–∞–π–ª –∑ —ñ—Å—Ç–æ—Ä—ñ—è–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
